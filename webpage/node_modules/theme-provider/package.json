{
  "_args": [
    [
      {
        "raw": "theme-provider",
        "scope": null,
        "escapedName": "theme-provider",
        "name": "theme-provider",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/paullee/MealDeal/MealDeal/webpage"
    ]
  ],
  "_from": "theme-provider@latest",
  "_id": "theme-provider@1.0.2",
  "_inCache": true,
  "_location": "/theme-provider",
  "_nodeVersion": "4.8.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/theme-provider-1.0.2.tgz_1489612253737_0.33436734112910926"
  },
  "_npmUser": {
    "name": "jschr",
    "email": "jordan.schroter@gmail.com"
  },
  "_npmVersion": "2.15.11",
  "_phantomChildren": {},
  "_requested": {
    "raw": "theme-provider",
    "scope": null,
    "escapedName": "theme-provider",
    "name": "theme-provider",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/theme-provider/-/theme-provider-1.0.2.tgz",
  "_shasum": "fa4c8df86f49e42efd72b96d1b4ecac98ee461a5",
  "_shrinkwrap": null,
  "_spec": "theme-provider",
  "_where": "/Users/paullee/MealDeal/MealDeal/webpage",
  "author": {
    "name": "Jordan Schroter"
  },
  "bugs": {
    "url": "https://github.com/jschr/theme-provider/issues"
  },
  "dependencies": {
    "invariant": "^2.2.1",
    "object-path": "^0.11.4",
    "object-path-immutable": "^0.5.1"
  },
  "description": "React helpers for building themes.",
  "devDependencies": {
    "@types/enzyme": "^2.7.5",
    "@types/expect": "^1.20.0",
    "@types/invariant": "^2.2.28",
    "@types/jsdom": "^2.0.30",
    "@types/mocha": "^2.2.40",
    "@types/react-redux": "^4.4.37",
    "cross-env": "^3.1.4",
    "enzyme": "^2.7.1",
    "expect": "^1.20.2",
    "jsdom": "^9.11.0",
    "jsdom-global": "^2.1.1",
    "mocha": "^3.2.0",
    "react": "^15.4.2",
    "react-addons-test-utils": "^15.4.2",
    "react-dom": "^15.4.2",
    "react-redux": "^5.0.3",
    "redux": "^3.6.0",
    "rimraf": "^2.5.4",
    "ts-node": "^2.1.0",
    "tslint": "^4.4.2",
    "typescript": "^2.2.1"
  },
  "directories": {},
  "dist": {
    "shasum": "fa4c8df86f49e42efd72b96d1b4ecac98ee461a5",
    "tarball": "https://registry.npmjs.org/theme-provider/-/theme-provider-1.0.2.tgz"
  },
  "gitHead": "e1843618b5bc2ab265a9798c2ca8693bf5c9fa32",
  "homepage": "https://github.com/jschr/theme-provider#readme",
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "jschr",
      "email": "jordan.schroter@gmail.com"
    }
  ],
  "name": "theme-provider",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^15.3.0",
    "react-dom": "^15.3.0",
    "react-redux": "^3.0.0 || ^4.0.0 || ^5.0.0",
    "redux": "^3.0.0"
  },
  "readme": "# theme-provider\n\n[![npm](https://img.shields.io/npm/v/theme-provider.svg)](https://www.npmjs.com/package/theme-provider)\n[![Build Status](https://img.shields.io/travis/jschr/theme-provider/master.svg)](https://travis-ci.org/jschr/theme-provider)\n\nReact helpers for theming components. Works with inline styles or any css-in-js library.\n\nDemos:\n  * [Basic Example](http://theme-provider-basic-example.surge.sh/)\n\n## Installation\n\n```bash\nnpm install --save react react-dom redux react-redux # peer dependencies\nnpm install --save theme-provider\n```\n\n## Usage\n\n```js\n// MyApp.js\n\nimport { withTheme, ThemeProvider } from 'theme-provider'\n\nfunction MyApp({ theme }) {\n  return (\n    <ThemeProvider theme={theme}>\n      <MyThemedComponent />\n    </ThemeProvider>\n  )\n}\n\n// theme variables\nexport default withTheme({\n  primaryColor: 'blue'\n})(MyApp)\n\n// or theme variables as a function of props\nexport default withTheme(props => ({\n  primaryColor: props.primaryColor\n}))(MyApp)\n```\n\nCheck out the [basic form example](examples/basic) for the entire source.\n\n```js\n// MyThemedComponent.js\n\nimport { withStyles } from 'theme-provider'\n\nfunction MyThemedComponent({ styles }) {\n  return (\n    <div style={styles.base} />\n  )\n}\n\nexport default withStyles(theme => ({\n  base: {\n    background: theme.primaryColor\n  }\n}))(MyThemedComponent)\n\n```\n\n## Usage with Glamor\n\n```js\n// MyThemedComponent.js\n\nimport { style } from 'glamor'\nimport { withStyles } from 'theme-provider'\n\nfunction MyThemedComponent({ styles }) {\n  return (\n    <div {...styles.base} />\n  )\n}\n\nexport default withStyles(theme => ({\n  base: style({\n    background: theme.primaryColor\n  })\n}))(MyThemedComponent)\n\n```\n\n## Usage with Aphrodite\n\n```js\n// MyThemedComponent.js\n\nimport { StyleSheet, css } from 'aphrodite'\nimport { withStyles } from 'theme-provider'\n\nfunction MyThemedComponent({ styles }) {\n  return (\n    <div className={css(styles.base)} />\n  )\n}\n\nexport default withStyles(theme => StyleSheet.create({\n  base: {\n    background: theme.primaryColor\n  }\n}))(MyThemedComponent)\n\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jschr/theme-provider.git"
  },
  "scripts": {
    "build": "rimraf ./lib && tsc",
    "lint": "tslint ./src --config ./tslint.json --project ./tsconfig.json",
    "prepublish": "npm run lint && npm run build",
    "test": "mocha -r ts-node/register -r jsdom-global/register -S tests/**/*.spec.ts[x]"
  },
  "typings": "lib/index.d.ts",
  "version": "1.0.2"
}
